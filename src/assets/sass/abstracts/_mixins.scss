// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
///
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
///
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

@mixin linear-gradient($direction, $color-stops...) {
  // Direction has been omitted and happens to be a color-stop
  @if is-direction($direction) == false {
    $color-stops: $direction, $color-stops;
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}

@mixin linear-gradient-important($direction, $color-stops...) {
  // Direction has been omitted and happens to be a color-stop
  @if is-direction($direction) == false {
    $color-stops: $direction, $color-stops;
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1) !important;
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops) !important;
  background: linear-gradient($direction, $color-stops) !important;
}

// Generates css classes for defined colors.
@mixin generate-colors($colors: $knife-colors, $color-base-key: $color-base-key) {
  @each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

      @each $color-name, $color in $colors {
        @if type-of($color) == 'map' {
          $color-types: $color;

          @each $color-type, $color in $color-types {
            $color-type-infix: color-type-infix($color-type, $color-base-key);

            .c#{$infix}-#{$color-name}#{$color-type-infix} {
              color: $color !important;
            }
          }
        } @else {
          .c#{$infix}-#{$color-name} {
            color: $color !important;
          }
        }
      }
    }
  }
}

/// Generates css classes for defined gradients.
@mixin generate-gradients($gradients: $knife-gradients) {
  @each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

      @each $name, $gradient in $gradients {
        .g#{$infix}-#{$name} {
          @include linear-gradient-important($gradient...)
        }
      }
    }
  }
}

@mixin gradient($gradient-name, $gradients: $knife-gradients) {
  @if not map-has-key($gradients, $gradient-name) {
    @error 'There is no gradient with name `#{$gradient-name}`';
  }

  $gradient: map-get($gradients, $gradient-name);
  @include linear-gradient($gradient...);
}


@mixin container {
  padding-top: $container-padding-y;
  padding-bottom: $container-padding-y;
  padding-left: $container-padding-x;
  padding-right: $container-padding-x;
}

@mixin placeholder {
  &::-webkit-input-placeholder {@content}
  &:-moz-placeholder           {opacity: 1; @content}
  &::-moz-placeholder          {opacity: 1; @content}
  &:-ms-input-placeholder      {@content}
}
